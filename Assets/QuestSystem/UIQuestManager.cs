//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using UnityEngine.UI;

public class UIQuestManager : MonoBehaviour
{
	public Text panelTitle;

	public GameObject successPanel;

	public GameObject failPanel;

	public Text titleCurrentQuest;

	public int numQuest = 0;

	public bool showDescription = false;

	public Text descriptionCurrentQuest;

	public Text counter;

	private static object padlock = new object();

	private static UIQuestManager singleton;

	public static UIQuestManager Instance() {
		lock (padlock) {
			if(singleton == null)
				singleton = new UIQuestManager();
		};
		return singleton;
	}
	

	public void Start() {
		if (singleton == null)
			singleton = this;
		else {
			if(singleton != this)
				DestroyImmediate (this);
		}
		DontDestroyOnLoad (this);
	}

	public void Update() {
		RefreshDescription ();
	}

	public void ShowEmptyQuest() {
		descriptionCurrentQuest.text = "";
		titleCurrentQuest.text = "Aucune mission";
		counter.text = "";
	}

	public void RefreshDescription() {
		if (QuestManager.Instance ().HaveCurrentQuest()) {
			Quest quest = QuestManager.Instance().currentQuest;
			titleCurrentQuest.text = quest.GetTitle();
			descriptionCurrentQuest.text = quest.GetDescription ();
		}
	}

	public void ChangeCurrentQuest(Quest quest) {
		Debug.Log ("UIQM:" + quest);
		if (quest == null) {
			ShowEmptyQuest();
			return;
		}
		numQuest++;

		counter.text = numQuest + " sur " + QuestManager.Instance ().quests.Count;


		titleCurrentQuest.text = quest.GetTitle();
		descriptionCurrentQuest.text = quest.GetDescription ();
	}

	public void ShowSuccess() {
		StartCoroutine (Show(successPanel));
	}

	public void ShowFail() {
		StartCoroutine (Show(failPanel));
	}



	public IEnumerator Show(GameObject panel) {
		//MusicManager.Instance ().PlaySuccessSong ();
		panel.SetActive (true);
		yield return new WaitForSeconds(3);
		panel.SetActive (false);		//MusicManager.Instance().FadeAway();
	}





}



